                                                                                    1. MULTITHREADING(Thread in c++11)


*Multithreading is a concurrent execution model,where multiple threads runs independtly within a single process.
*Thread is a smallest unit of a computer program that can be scheduled by an operating system scheduler.
*In a multithreaded program, multiple threads execute independently and share the same resources, such as memory space and file descriptors, within a process.

1.In every application there is a default thread which is main(), inside this we create another threads.
2.Thread is a lightweight process. Idea of thread is to achieve parallesim by dividing process into multiple threads.



.................................................................................................................................................................................................................
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



                                                                                  2.WAYS TO CREATE THREAD IN C++11



1.Function pointers
2.Lambda functions
3.Functors(objects)
4.non-static Member functions
5.Static member functions
6.using async









Eg:print odd and even numbers without using thread
#include<iostream>
#include<thread>
using namespace std;
void oddNums(int start,int end)
{
    for(int i=start;i<=end;i++)
    {
        if(i%2!=0)
        {
            cout<<i<<endl;
        }
    }
}
void evenNums(int start,int end)
{
    for(int i=start;i<=end;i++)
    {
        if(i%2==0)
        {
            cout<<i<<endl;
        }
    }
}
int main()
{
    oddNums(1,10);
    evenNums(1,10);
    return 0;
}

o/p:
1
3
5
7
9
2
4
6
8
10




Eg1:print odd and even numbers  using thread(using function pointer)
#include<iostream>
#include<thread>
using namespace std;
void oddNums(int start,int end)
{
    for(int i=start;i<=end;i++)
    {
        if(i%2!=0)
        {
            cout<<i<<endl;
        }
    }
}
void evenNums(int start,int end)
{
    for(int i=start;i<=end;i++)
    {
        if(i%2==0)
        {
            cout<<i<<endl;
        }
    }
}
int main()
{
    thread t1(oddNums,1,10);
    thread t2(evenNums,2,10);
    t1.join();
    t2.join();

    return 0;
}
o/p:
1
2
3
4
5
6
7
8
9
10





Eg3: using functor(objects)

   Eg:
    #include <iostream>
    #include <thread>

    class MyThread {
    public:
        void operator()() {
            std::cout << "Hello from thread!\n";
        }
    };

    int main() {
        std::thread t{MyThread()};
        t.join();
        return 0;
    }
    o/p:Hello from thread!




    Eg2:using Lambda

    #include <iostream>
    #include <thread>
    using namespace std;


    int main() {
        std::thread t([](){cout<<"Hello from thread";});
        t.join();
        return 0;
    }
    o/p:Hello from thread


Eg4: using non-static member function
Eg:
    #include <iostream>
    #include <thread>
    using namespace std;
    class Myclass
    {
        public:
        void func(string s)
        {
            cout<<"Hello from thread! "<<s<<endl;
        }
    };

    int main() {
        Myclass obj;
    std::thread t(&Myclass::func,&obj,"sivakrishnateja");
        t.join();
        return 0;
    }
    o/p:Hello from thread! sivakrishnateja




Eg6: using Async

Eg:
    #include <iostream>
    #include <thread>
    #include<future>
    using namespace std;
    int func()
    {
        return 102;
    }

    int main() {
        future<int>f=async(launch::async,func);
        cout<<"Inside main func"<<endl;
        cout<<"Result :"<<f.get();
        return 0;
    }

    o/p:Inside main func
        Result :102


Eg5: using static member functions


 #include <iostream>
    #include <thread>
    using namespace std;
    class Myclass
    {
        public:
        static void func(string s)
        {
            cout<<"Hello from thread! "<<s<<endl;
        }
    };

    int main() {
        
    std::thread t(&Myclass::func,"sivakrishnateja");
        t.join();
        return 0;
    }
    o/p:Hello from thread! sivakrishnateja


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                3.JOIN AND DETACH IN C++



JOIN Notes:
    1.Once a thread is started we wait for this thread to finish by calling join() function  on thread object. 
    2.Double join will result into program termination.
    3.If needed we should check thread is joinable before joining(using joinable() function).











Eg:
#include<bits/stdc++.h>
using namespace std;
void run(int x)
{
    while(x >=1)
    {
        cout<<endl<<x<<" Teja"<<endl;
        x--;
        this_thread::sleep_for(chrono::seconds(3)); //it will take 3 seconds after that only "After main" will execute
    }
}
int main()
{
thread t(run,5);
cout<<"Main"<<endl;
t.join();
cout<<"After main\n";
}

o/p:

Main
5 Teja
4 Teja
3 Teja
2 Teja
1 Teja
After main





Eg2:
#include<bits/stdc++.h>
using namespace std;
void run(int x)
{
    while(x-- >0)
    {
        cout<<endl<<x<<" Teja"<<endl;
        
        this_thread::sleep_for(chrono::seconds(3));
    }
}
int main()
{
thread t(run,10);
cout<<"Main"<<endl;
t.join();
t.join();
cout<<"After main\n";
}
o/p:
Main
9 Teja
8 Teja
7 Teja
6 Teja
5 Teja
4 Teja
3 Teja
2 Teja
1 Teja
0 Teja
terminate called after throwing an instance of 'std::system_error'
  what():  Invalid argument
Aborted (core dumped)




Eg3:
#include<bits/stdc++.h>
using namespace std;
void run(int x)
{
    while(x-- >0)
    {
        cout<<endl<<x<<" Teja"<<endl;
        
        this_thread::sleep_for(chrono::seconds(3));
    }
}
int main()
{
thread t(run,10);
cout<<"Main"<<endl;
t.join();
cout<<"Hii from inside main\n";
if(t.joinable()) //It it is already join,then only it will
t.join();
cout<<"After main\n";
}

o/p:
Main
9 Teja
8 Teja
7 Teja
6 Teja
5 Teja
4 Teja
3 Teja
2 Teja
1 Teja
0 Teja
Hii from inside main
After main




DETACH Notes:
    1.This is used to detach newly created thread from the parent thread.
    2.Always check before detaching thread  that it is joinable otherwise we may end up double detaching and double detach()  will result into program termination.
    3.If we have detached thread and main function is returning then the detaced  thread execution is suspension.


Eg1:
#include<bits/stdc++.h>
using namespace std;
void run(int x)
{
    while(x-- >0)
    {
        cout<<endl<<x<<" Teja"<<endl;
        
        this_thread::sleep_for(chrono::seconds(2));
    }
}
int main()
{
thread t(run,10);
cout<<"Main"<<endl;
t.detach();

cout<<"After main\n";
}

Note: the output behaviour was different every time.
o/p 1:
Main
After main
9 Teja
8 Teja
7 Teja
6 Teja
5 Teja
4 Teja
3 Teja
2 Teja
1 Teja
0 Teja

o/p 2:
Main
After main



Eg2:
#include<bits/stdc++.h>
using namespace std;
void run(int x)
{
    while(x-- >0)
    {
        cout<<endl<<x<<" Teja"<<endl;
        
        this_thread::sleep_for(chrono::seconds(2));
    }
}
int main()
{
thread t(run,10);
cout<<"Main"<<endl;
t.detach();
if(t.joinable())
t.detach();

cout<<"After main\n";
}





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                4.MUTEX IN C++




* Mutex in c++ Threading  | Why use Mutex | What is Race condition  and how to solve it ? | what is critical section


1. What is mutex ?
    *Mutex stands for mutual exclusion.
    *It can be accessing something mutually ,first you and next follows.


2.why mutex is used?
    *Mutex is used to avoid race condition.
    *we use lock() unlock() on mutex to avoid race condition.


3.Race condition:
    *Race condition is a situation,where two or more threads process happend to change a common data at same time.


4. Critical section:
    *If there is a race condition then we have to protect it and the protected section is called critical section.





Eg1:
#include<iostream>
#include<thread>
using namespace std;
int money=0;
void addMoney()
{
    ++money;
}
int main()
{
    thread t1(addMoney);
    thread t2(addMoney);
    t1.join();
    t2.join();
    cout<<money<<endl;
    return 0;

}


o/p:2 [Note:Sometimes will give different result as output,because both threads are accessing samething mutually.]




Eg2:using mutex

#include<iostream>
#include<thread>
#include<mutex>
using namespace std;
int money=0;
mutex m;
void addMoney()
{
    m.lock();
    ++money;
    m.unlock();
}
int main()
{
    thread t1(addMoney);
    thread t2(addMoney);
    t1.join();
    t2.join();
    cout<<money<<endl;
    return 0;

}

o/p: 2

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                   5.Mutex try_lock 

* std::mutex::try_lock() on c++ multithreading:

  1.try_lock() tries to lock on mutex.Returns immediately.on successful lock acquistion returns true otherwiae returns false.
  2.If try_lock() is not able to lock on mutex,then its doesn't get blocked that's why it is called non-blocking.
  3.If try_lock() is called again on same thread which owns the mutex, the behaviour is undefined.It is a dead lock situation with undefined behaviour.

Eg:
#include<iostream>
#include<thread>
#include<mutex>
using namespace std;
int money=0;
mutex m;
void addMoney()
{
    for(int i=1;i<=10;i++)
    {
        if(m.try_lock())
        {
            ++money;
            m.unlock();
        }
    }
    
}
int main()
{
    thread t1(addMoney);
    thread t2(addMoney);
    t1.join();
    t2.join();
    cout<<money<<endl;
    return 0;

}

o/p:20


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                    6. try_lock in mutex

*std::try_lock() in c++11 multithreading:

1.std::try_lock() tries to lock all lockable objects passed in it one by one in given order.

    syntax: std::try_lock(m1,m2,m3.........mn)

2.On success this function returns -1 otherwise it will return 0-based mutex index number which it could not lock.
3.If it fails to lock any of the mutex then it will release all the mutex it locked before.
4.If a call to try_lock results in exception , unlock is called fro any locked objects before rethrowing.



Eg:
#include <iostream>
#include <mutex>
#include <thread>

std::mutex mutex1;
std::mutex mutex2;

void example_function(int id) {
    std::unique_lock<std::mutex> lock1(mutex1, std::defer_lock);
    std::unique_lock<std::mutex> lock2(mutex2, std::defer_lock);

    // Attempt to lock both mutexes without blocking
    if (std::try_lock(lock1, lock2) == -1) {
        // Lock acquired for both mutexes
        // Perform critical section operations
        std::cout << "Thread " << id << " acquired locks.\n";

        // Simulate some work
        std::this_thread::sleep_for(std::chrono::milliseconds(200));

        // Release locks explicitly (optional)
        lock1.unlock();
        lock2.unlock();
    } else {
        // Failed to acquire both locks
        std::cout << "Thread " << id << " failed to acquire locks.\n";
    }
}

int main() {
    std::thread t1(example_function, 1);
    std::thread t2(example_function, 2);

    t1.join();
    t2.join();

    return 0;
}

o/p:
Thread 1 acquired locks.
Thread 2 failed to acquire locks.



NOTE:

*Timing of Execution:

  thread1 starts and attempts to acquire locks.
  It successfully acquires both locks and enters the critical section.
  While thread1 is still in the critical section, thread2 starts and attempts to acquire the locks.
  Since thread1 is still holding the locks, thread2 fails to acquire both locks.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  9.Lock Guard in c++

*TOPIC: lock_guard in c++ (std::lock_guard<mutex>lock(m1))

  0.It is very light-weight wrapper for owing  mutex on scoped basis.
  1.It acquires mutex lock the moment you create the object of the lock guard.
  2.It automatically removes the  lock while goes out of scope.
  3.you can not explicity  unlock the lock guard.
  4.you cannot copy lock guard.



Eg: I used mutex in this prgm

#include <bits/stdc++.h>
using namespace std;
  
int buffer=0;
mutex m;
void Increment(const char* threadNumber,int val)
{
    m.lock();
    for(int i=1;i<=val;i++)
    {
        buffer++;
    }
    m.unlock();
}

int main() {
  thread t1(Increment,"T0",10);
  thread t2(Increment,"T1",10);
  t1.join();
  t2.join();
  cout<<"Buffer value is :"<<buffer;

    
    return 0;
}

o/p:20



Eg: In this program iam using lock_guard

#include <bits/stdc++.h>
using namespace std;
  
int buffer=0;
mutex m;
void Increment(const char* threadNumber,int val)
{
    lock_guard<mutex>lock(m);
    for(int i=1;i<=val;i++)
    {
        buffer++;
    }
}

int main() {
  thread t1(Increment,"T0",10);
  thread t2(Increment,"T1",10);
  t1.join();
  t2.join();
  cout<<"Buffer value is :"<<buffer;
    return 0;
}

o/p: Buffer value is:20






Eg:
#include <bits/stdc++.h>
using namespace std;
  
int buffer=0;
mutex m;
void Increment(const char* threadNumber,int val)
{
    lock_guard<mutex>lock(m);
    for(int i=1;i<=val;i++)
    {
        buffer++;
         cout<<threadNumber<<" Buffer value is :"<<buffer<<endl;
    }
}

int main() {
  thread t1(Increment,"T0",10);
  thread t2(Increment,"T1",10);
  t1.join();
  t2.join();
 
    return 0;
}


o/p:
T0 Buffer value is :1
T0 Buffer value is :2
T0 Buffer value is :3
T0 Buffer value is :4
T0 Buffer value is :5
T0 Buffer value is :6
T0 Buffer value is :7
T0 Buffer value is :8
T0 Buffer value is :9
T0 Buffer value is :10
T1 Buffer value is :11
T1 Buffer value is :12
T1 Buffer value is :13
T1 Buffer value is :14
T1 Buffer value is :15
T1 Buffer value is :16
T1 Buffer value is :17
T1 Buffer value is :18
T1 Buffer value is :19
T1 Buffer value is :20


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                10. unique lock in c++

*TOPIC: unique lock in c++ (std::unique_lock<mutex>lock(m1))

  0.The  class unique lock is a mutex ownership wrapper.

  1.It allows:
    a.Can have different locking stragieces.
    b.Time constrained attempts  at locking (try_lock_for,try_lock_until).
    c.recursive locking.
    d.transfer of lock ownership (move not copy).
    e.condition variables

Locking stratagieces:
  a. defer_lock -do not accquire ownership of the mutex.
  b. try_to_lock -try to accquire ownership of the mutex with bocking.
  c. adopt_lock -assuming the calling thread already has ownership of the mutex.




Eg1:
#include <bits/stdc++.h>
using namespace std;
  
int buffer=0;
mutex m;
void Increment(const char* threadNumber,int val)
{
    unique_lock<mutex>lock(m);//Automatically calls  lock on mutex m
    for(int i=1;i<=val;i++)
    {
        buffer++;
         cout<<threadNumber<<" Buffer value is :"<<buffer<<endl;
    }
}

int main() {
  thread t1(Increment,"T0",10);
  thread t2(Increment,"T1",10);
  t1.join();
  t2.join();
 
    return 0;
}

o/p:
T0 Buffer value is :1
T0 Buffer value is :2
T0 Buffer value is :3
T0 Buffer value is :4
T0 Buffer value is :5
T0 Buffer value is :6
T0 Buffer value is :7
T0 Buffer value is :8
T0 Buffer value is :9
T0 Buffer value is :10
T1 Buffer value is :11
T1 Buffer value is :12
T1 Buffer value is :13
T1 Buffer value is :14
T1 Buffer value is :15
T1 Buffer value is :16
T1 Buffer value is :17
T1 Buffer value is :18
T1 Buffer value is :19
T1 Buffer value is :20






Eg2:  used locking stratagieces( defer_lock)

#include <bits/stdc++.h>
using namespace std;
  
int buffer=0;
mutex m;
void Increment(const char* threadNumber,int val)
{
    unique_lock<mutex>lock(m,defer_lock);//Does not call lock on mutex m1,because used defer_lock.
        //some piece of code
    lock.lock();//But then we will have to eplicitly tell to lock when ever we want to lock the mutex m.
    for(int i=1;i<=val;i++)
    {
        buffer++;
         cout<<threadNumber<<" Buffer value is :"<<buffer<<endl;
    }
}

int main() {
  thread t1(Increment,"T0",10);
  thread t2(Increment,"T1",10);
  t1.join();
  t2.join();
 
    return 0;
}




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-
                                                                          11. condition variable in c++

Topic: condition variable in c++ threading:


Important point: conditional variable is  used for two purposes
    a.Notify other threads
    b.waiting for some conditions

1. condition variable allows running threads to wait on some conditions  and once those conditions are met the  waiting thread is notified using:
  a.notify_one()
  .notify_all()

2.you need mutex to use conditional variable.

3.If some thread want to wait on some condition then it has to do these things:
  a.Acquire the mutex lock using std::unique_lock<std::mutex>lock(m);.
  b.Execute wait, wait_for,or wait_until.The wait operations automatically release the mutex and suspend the execution of the thread.
  c.when the condition variable is notified ,the thread is awakend ,and the mutex is automatically reacquired.The thread should then check the condition and resume  waiting if the wake up was supirious.

Note:
  1.condition variables(cv)are used to synchronize  two or more threads.
  2.Best use case of condition variable is prodecure/consumer variable.




Eg:
#include <iostream>
#include<thread>
#include<mutex>
#include<condition_variable>
using namespace std;
mutex m;
int balance=0;
condition_variable cv;
void addMoney(int money)
{
  lock_guard<mutex>lg(m);
  balance+=money;
  cout<<"Amount added to current balance :"<<money<<endl;
  cout<<"Current balance is :"<<balance<<endl;
  cv.notify_one();
}
void withdrawMoney(int money)
{
  unique_lock<mutex>ul(m);
  cv.wait(ul,[]{return (balance!=0)?true:false;});
  if(balance>=money)
  {
    balance-=money;
    cout<<"Deducted Amount is: "<<money<<endl;
  }
  else
  {
    cout<<"Amount can't be deducted.current Balance is less than "<<money<<endl;
  }
  cout<<"Current balance is :"<<balance<<endl;
}
int main()
{
  thread t1(withdrawMoney,500);
  thread t2(addMoney,2000);
  t1.join();
  t2.join();
  return 0;
}


o/p:
Amount added to current balance :2000
Current balance is :2000
Deducted Amount is: 500
Current balance is :1500


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  

                                                                            12. DeadLock in C++


*A deadlock in C++ multithreading occurs when two or more threads are blocked forever, each waiting for the other to release a resource that it holds. In other words, it's a situation where a set of threads are unable to proceed because each is waiting for the other to release a lock, resulting in a cyclic waiting dependency.

Eg:
#include <iostream>
#include<thread>
#include<mutex>
using namespace std;
mutex m1,m2;
void thread1()
{
  m1.lock();
  this_thread::sleep_for(chrono::seconds(2));
  m2.lock();
  cout<<"Critical section of thread thread one!"<<endl;
  m1.unlock();
  m2.unlock();
}
void thread2()
{
  m2.lock();
  this_thread::sleep_for(chrono::seconds(2));
  m1.lock();
  cout<<"Critical section of thread thread two!"<<endl;
  m2.unlock();
  m1.unlock();
}
int main()
{
  thread t1(thread1);
  thread t2(thread2);
  t1.join();
  t2.join();
  return 0;
}
o/p:


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                            13.Thread synchronisation

TOPIC: Thread/process synchronization

  Note:We will use only thread examples to explain this topic

  POINTS:
    1.Thread or process synchronize to access critical section.
    2.critical section is one or collection  of program statements which should be executed by only one thread or process at a time.




Eg:
#include <iostream>
#include<thread>
#include<mutex>
using namespace std;
mutex m1;
int bankBalance=0;
void thread1(int money)
{
  m1.lock();
  bankBalance+=money;
  m1.unlock();
}

int main()
{
  thread t1(thread1,100);
  thread t2(thread1,50);
  t1.join();
  t2.join();
  cout<<"Bank Balance:"<<bankBalance<<endl;
  return 0;
}

o/p:
Bank Balance: 150


Note:Here, synchronization can be done with mutex using lock() and unlock()


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                14. std::lock in c++


*TOPIC: std::lock() in c++11

  1.It is used to lock multiple mutex at a time.
    syntax: std::lock(m1,m2,m3,....mn)

  2.All arguments are locked  via a sequence of calls to lock(), try_lock(), or unlock() on each argument.

  3.Order of locking is not defined (it will try to lock  provided mutex in any order and ensure that  there is on deadlock).

  4.It is a blocking call.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                             15.promise and future in c++


*TOPIC: std::future and std::promise in c++ threading


Notes:
  1. std::promise
    -used to set values or exceptions.

  2.std::future
    -used to get values from promise.
    -Ask promise ,if value is available.
    -wait for the promise



Note: promise is like setter & future is like getter

Eg:
#include<bits/stdc++.h>
using namespace std;
void findSum(promise<int>&&promiseSum,int start,int end)
{
    int sum=0;
    for(int i=start;i<=end;i++)
    {
        sum+=i;
    }
    promiseSum.set_value(sum);
}
int main(void)
{
    int start=1,end=5;
    promise<int>sum;
    future<int>futureSum=sum.get_future();
    cout<<"Thread created!"<<endl;
    thread threadsum(findSum,move(sum),start,end);
    cout<<"Waiting for result!!"<<endl;
    cout<<futureSum.get()<<endl;
    cout<<"Completed!"<<endl;
    threadsum.join();
    return 0; 
}


o/p:
Thread created!
Waiting for result!
15
Completed


Eg:printing odd numbers
#include<bits/stdc++.h>
using namespace std;
void findodd(promise<vector<int>>&&oddpromise,int start,int end)
{
    vector<int>oddNumbers;
    for(int i=start;i<=end;i++)
    {
        if(i%2 !=0)
        {
            oddNumbers.push_back(i);
        }
    }
    oddpromise.set_value(move(oddNumbers));
    
}
int main()
{
    int start=1,end=5;
    promise<vector<int>>oddpromise;
    future<vector<int>>oddfuture=oddpromise.get_future();
    cout<<"Thread created!"<<endl;
    thread threadOddSum(findodd,move(oddpromise),start,end);
    cout<<"Waiting for result!"<<endl;
vector<int>result=oddfuture.get();
cout<<"Odd Numbers\n";
for(auto i :result)
{
    cout<<i<<" ";
}
    cout<<"Completed!"<<endl;
    threadOddSum.join();
}

o/p:
Thread created!
Waiting for result!
Odd Numbers
1 3 5 Completed!



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                  16. std::async in c++ | create a Task



Topic: std::async

1.It runs a function asynchronously and returns std::fututre that will hold the result.
2.There are 3 launch policies for creating task:
  a. std::launch::async
  b. std::launch::deffered
  c.std::launch::async | std::launch::deffered

How it works?
1.It automatically creates a thread  and promise object for use.
2.Then passes std::promise object to thread function and returns the associated stf::future object.
3.when our passed argument function exists then its value will be set in this promise object,so eventually return a value will be available in std::future object







Eg: using std::launch::deferred policy

#include<bits/stdc++.h>
using namespace std;
int oddSum(int start,int end)
{
    int sum=0;
    for(int i=start;i<=end;i++)
    {
        if(i%2 !=0)
        {
            sum+=i;
        }
    }
    return sum;
}
int main()
{
    cout<<"Thread created with std::launch deferred policy!"<<endl;
    future<int>future_sum=async(std::launch::deferred,oddSum,1,5);//it will wait for some one
    cout<<"Waiting for result!"<<endl;
    cout<<future_sum.get()<<endl;
    return 0;
   
}


o/p:
Thread created with std::launch deferred policy!
Waiting for result!
9




Eg:
#include<bits/stdc++.h>
using namespace std;
int oddSum(int start,int end)
{
    cout<<"Thread ID :"<<this_thread::get_id()<<endl;
    int sum=0;
    for(int i=start;i<=end;i++)
    {
        if(i%2 !=0)
        {
            sum+=i;
        }
    }
    return sum;
}
int main()
{
    cout<<"Thread created with std::launch async policy!"<<endl;
    cout<<"Thread ID :"<<this_thread::get_id()<<endl;
    future<int>future_sum=async(std::launch::async,oddSum,1,5);
    cout<<"Waiting for result!"<<endl;
    cout<<future_sum.get()<<endl;
    return 0;
   
}

o/p:

Thread created with std::launch async policy!
Thread ID :139762745336768
Waiting for result!
Thread ID :139762745321024
9













Eg: using std::launch::async policy

#include<bits/stdc++.h>
using namespace std;
int oddSum(int start,int end)
{
    int sum=0;
    for(int i=start;i<=end;i++)
    {
        if(i%2 !=0)
        {
            sum+=i;
        }
    }
    return sum;
}
int main()
{
    cout<<"Thread created with std::launch async policy!"<<endl;
    future<int>future_sum=async(std::launch::async,oddSum,1,5);//It will not wait for someone,as soon as it will hit this line,thread will created and start running.
    cout<<"Waiting for result!"<<endl;
    cout<<future_sum.get()<<endl;
    return 0;
   
}


o/p:
Thread created with std::launch async policy!
Waiting for result!
9





Eg:
#include<bits/stdc++.h>
using namespace std;
int oddSum(int start,int end)
{
    cout<<"Thread ID :"<<this_thread::get_id()<<endl;
    int sum=0;
    for(int i=start;i<=end;i++)
    {
        if(i%2 !=0)
        {
            sum+=i;
        }
    }
    return sum;
}
int main()
{
    cout<<"Thread created with std::launch async policy!"<<endl;
    cout<<"Thread ID :"<<this_thread::get_id()<<endl;
    future<int>future_sum=async(std::launch::async,oddSum,1,5);
    cout<<"Waiting for result!"<<endl;
    cout<<future_sum.get()<<endl;
    return 0;
   
}

o/p:
Thread created with std::launch deferred policy!
Thread ID :140238487536576
Waiting for result!
Thread ID :140238487520832
9


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                    17. sleep vs wait in threading



sleep:
-----
I'm done with my timeslice , and please dont give me another one for atleast 'n' milliseconds .The os doesn't even try to schedule the sleeping thread until requested time has passed.

 POINTS:
  1.It will keep the lock and sleep.
  2.sleep is directly to thread,it is a thread function.



wait:
-----

I'm done with my timeslice,.Don't give me another timeslice until someones notify() or notifyAll().As with sleep(),the os won't even try to schedule your task unlesssomeone calls notify() .
POINTS:
  1.It releases the lock and wait.
  2.wait on condition variable ,it is like there is a condition variable in a thread and wait is applied to that cv but its end up putting thread in waiting state.





   
    



